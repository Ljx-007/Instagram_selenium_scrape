<%# 添加 topic-id meta 标签 %>
<%= content_tag :meta, nil, name: "topic-id", content: @topic.id %>

<div class="container mt-4">
  <div class="row">
    <div class="col-md-8">
      <h1>#<%= @topic.name %></h1>
      <p class="lead">
        查看关于
        <a href="https://www.instagram.com/explore/tags/<%= @topic.name %>/" target="_blank">
        #<%= @topic.name %>
        </a> 
        的实时Instagram内容
      </p>
    </div>
    <div class="col-md-4 text-end">
      <button id="refresh-button" type="button" class="btn btn-outline-primary">
        <i class="bi bi-arrow-clockwise"></i> 刷新内容
      </button>
      <button id="cancel-button" type="button" class="btn btn-outline-danger d-none">
        <i class="bi bi-x-circle"></i> 取消获取
      </button>
      <%= link_to "返回话题列表", topics_path, class: "btn btn-outline-secondary ms-2" %>
      <%= button_to "删除话题", topic_path(@topic), method: :delete, class: "btn btn-outline-danger ms-2", data: { turbo_confirm: "确定要删除话题 ##{@topic.name} 吗？此操作不可撤销。" } %>
    </div>
  </div>

  <div id="alert-container"></div>

  <div class="row mt-4" id="posts-container">
    <% if @posts.any? %>
      <% @posts.each do |post| %>
        <div class="col-md-4 mb-4">
          <div class="card h-100 instagram-post-card">
            <% if post.image_url.present? %>
              <div class="card-img-container position-relative">
                <%= image_tag post.image_url, 
                    class: "card-img-top", 
                    alt: "Instagram post by #{post.username}",
                    loading: "lazy",
                    style: "width: 100%; height: 300px; object-fit: cover;" %>
              </div>
            <% else %>
              <div class="card-img-top bg-light text-center py-5">
                <i class="bi bi-instagram fs-1"></i>
                <p>无图片</p>
              </div>
            <% end %>
            <div class="card-body">
              <h5 class="card-title d-flex align-items-center">
                <i class="bi bi-person-circle me-2"></i>
                @<%= post.username.present? ? post.username : "未知用户" %>
              </h5>
              <p class="card-text instagram-caption"><%= post.caption.present? ? post.caption : "" %></p>
              
              <% if post.hashtags.present? && post.hashtags.any? %>
                <div class="hashtags mb-2">
                  <% post.hashtags.each do |tag| %>
                    <span class="badge bg-info text-dark">#<%= tag %></span>
                  <% end %>
                </div>
              <% end %>
              
              <div class="post-stats d-flex text-muted mb-2">
                <% if post.likes_count.present? %>
                  <small><i class="bi bi-heart-fill"></i> <%= post.likes_count %></small>
                <% end %>
              </div>
              
              <p class="card-text">
                <small class="text-muted">
                  <i class="bi bi-clock"></i> <%= post.posted_at %>
                </small>
              </p>
              
              <% if post.post_url.present? %>
                <a href="<%= post.post_url %>" target="_blank" class="btn btn-sm btn-outline-primary mt-2">
                  <i class="bi bi-instagram"></i> 查看原帖
                </a>
              <% end %>
            </div>
          </div>
        </div>
      <% end %>
    <% else %>
      <div class="col-12 text-center py-5">
        <p>暂无内容，请点击刷新按钮获取最新帖子。</p>
      </div>
    <% end %>
  </div>
</div>

<script type="text/javascript">
  // 函数：设置刷新按钮的事件监听器
  function setupRefreshButton() {
    const topicId = <%= @topic.id %>;
    const refreshButton = document.getElementById('refresh-button');
    const cancelButton = document.getElementById('cancel-button');
    const alertContainer = document.getElementById('alert-container');
    let abortController = null;
    
    if (refreshButton) {
      // 移除可能存在的旧事件监听器（防止重复绑定）
      refreshButton.replaceWith(refreshButton.cloneNode(true));
      cancelButton.replaceWith(cancelButton.cloneNode(true));
      
      // 获取更新后的DOM引用
      const newRefreshButton = document.getElementById('refresh-button');
      const newCancelButton = document.getElementById('cancel-button');
      
      // 刷新按钮点击事件
      newRefreshButton.addEventListener('click', function() {
        // 创建新的AbortController
        abortController = new AbortController();
        
        // 显示加载状态
        newRefreshButton.disabled = true;
        newRefreshButton.innerHTML = '<i class="bi bi-arrow-clockwise"></i> 正在获取数据...';
        
        // 显示取消按钮
        newCancelButton.classList.remove('d-none');
        
        // 显示加载提示
        alertContainer.innerHTML = `
          <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="bi bi-info-circle"></i> 正在获取Instagram数据，这可能需要一些时间，请耐心等待...
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        `;
        
        // 获取CSRF Token
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        
        // 发送AJAX请求
        fetch(`/topics/${topicId}/refresh`, {
          method: 'POST',
          headers: {
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          credentials: 'same-origin',
          signal: abortController.signal
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.error) {
            throw new Error(data.error);
          }
          
          // 显示成功消息
          alertContainer.innerHTML = `
            <div class="alert alert-success alert-dismissible fade show" role="alert">
              <i class="bi bi-check-circle"></i> ${data.message || '数据获取成功！'}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
          `;
          
          // 刷新页面显示新数据
          window.location.reload();
        })
        .catch(error => {
          // 如果是用户主动取消，显示不同的消息
          if (error.name === 'AbortError') {
            console.log('请求已取消');
            alertContainer.innerHTML = `
              <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle"></i> 获取数据已取消
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              </div>
            `;
          } else {
            console.error('刷新失败:', error);
            // 显示错误消息
            alertContainer.innerHTML = `
              <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <h4 class="alert-heading"><i class="bi bi-exclamation-triangle"></i> 获取数据失败</h4>
                <p>${error.message || '请稍后再试'}</p>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              </div>
            `;
          }
        })
        .finally(() => {
          // 恢复按钮状态
          newRefreshButton.disabled = false;
          newRefreshButton.innerHTML = '<i class="bi bi-arrow-clockwise"></i> 刷新内容';
          // 隐藏取消按钮
          newCancelButton.classList.add('d-none');
          // 清除 AbortController
          abortController = null;
        });
      });
      
      // 取消按钮点击事件
      newCancelButton.addEventListener('click', function() {
        if (abortController) {
          // 向后端发送取消请求
          const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
          
          // 显示取消中状态
          newCancelButton.disabled = true;
          newCancelButton.innerHTML = '<i class="bi bi-x-circle"></i> 取消中...';
          
          // 发送取消请求到后端
          fetch(`/topics/${topicId}/cancel_refresh`, {
            method: 'POST',
            headers: {
              'X-CSRF-Token': csrfToken,
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            console.log('取消请求已发送:', data);
            // 重置取消按钮状态
            newCancelButton.disabled = false;
            newCancelButton.innerHTML = '<i class="bi bi-x-circle"></i> 取消获取';
          })
          .catch(error => {
            console.error('发送取消请求失败:', error);
            // 即使请求失败也重置按钮状态
            newCancelButton.disabled = false;
            newCancelButton.innerHTML = '<i class="bi bi-x-circle"></i> 取消获取';
          });
          
          // 同时取消前端请求
          abortController.abort();
        }
      });
    }
  }

  // 在页面首次加载时设置事件监听器
  document.addEventListener('DOMContentLoaded', setupRefreshButton);
  
  // 在通过Turbo进行页面导航后重新设置事件监听器
  document.addEventListener('turbo:load', setupRefreshButton);
  
  // 兼容不使用Turbo的情况
  if (typeof Turbo === 'undefined') {
    // 如果没有使用Turbo，则监听hashchange和popstate事件
    window.addEventListener('hashchange', setupRefreshButton);
    window.addEventListener('popstate', setupRefreshButton);
  }
</script>